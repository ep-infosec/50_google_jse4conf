# Jse4conf was confused by names used in JS expressions
# and deduced incorrect cyclic references. These errors caused
# wrong evaluation order of key value experessions.
#
# Such situations can be worked around by a JS list that
# specifies key order. For example, T2's zOrder and T4's zObj
# can be any user chosen name. Those lists tell jse2conf to emit
# the given keys by the given order.

[T1]
   useJSE = true
   # Function parameter 'n' is not the key 'n'.
   fac = (n) => n < 2 ? 1 : n * fac(n-1)
   n = fac(6)

# Jse4conf generated the following errors for T1.
# var T1 = function() {
#   const n = 'fac(6)';
#   const fac = (n) => n < 2 ? 1 : n * fac(n - 1);
#   const useJSE = true;
#   // ERROR: n = fac(6)
#   // org.mozilla.javascript.EcmaError: ReferenceError: "fac" is not defined. (n#1)
#   return {fac:fac,n:n,useJSE:useJSE,};
#   // cycle: fac => n => fac
#   // cycle: n => fac => n
# }();

[T2]
   useJSE = true
   fac = (n) => n < 2 ? 1 : n * fac(n-1)
   n = fac(6)
   zOrder = [fac, n] # should evaluate fac before n

[T3]
   useJSE = true
   # Property 'n1' of x is not the key 'n1'.
   getN = (x) => x.n1
   # Property name 'n1' of an object is not the key 'n1'.
   xObj = ({n1:6, n2:7})
   n1 = getN(xObj)
   n2 = xObj.n2

# Jse4conf generated the following errors for T3.
# var T3 = function() {
#   const n2 = 'xObj.n2';
#   const xObj = ({ n1: 6, n2: 7});
#   const n1 = 'getN(xObj)';
#   const getN = (x) => x.n1;
#   const useJSE = true;
#   // ERROR: n2 = xObj.n2
#   // org.mozilla.javascript.EcmaError: ReferenceError: "xObj" is not defined. (n2#1)
#   // ERROR: n1 = getN(xObj)
#   // org.mozilla.javascript.EcmaError: ReferenceError: "getN" is not defined. (n1#1)
#   return {getN:getN,n1:n1,n2:n2,useJSE:useJSE,xObj:xObj,};
#   // cycle: getN => n1 => getN
#   // cycle: n1 => xObj => n1
#   // cycle: xObj => n2 => xObj
#   // cycle: n1 => getN => n1
#   // cycle: xObj => n1 => xObj
#   // cycle: n2 => xObj => n2
# }();

[T4]
   useJSE = true
   getN = (x) => x.n1
   xObj = ({n1:6, n2:7})
   n1 = getN(xObj)
   n2 = xObj.n2
   zObj = [xObj, getN, n1, n2] # define xObj and getN before n1 and n2

# If user defined key values depend on evaluation order,
# a list of key names can also force any evlauation order.

[T5] # a tricky counter
   useJSE = true
   count = ({n:0})
   # n1, n2, n3 are evaluated in the alphbetical order by default
   n1 = ++count.n ;1
   n2 = ++count.n ;2
   n3 = ++count.n ;3

[T6] # a tricky counter and explicit ordering of keys
   useJSE = true
   count = ({n:0})
   n1 = ++count.n ;3
   n2 = ++count.n ;2
   n3 = ++count.n ;1
   # users can specify evaluation order of n3, n2, n1
   orderOfKeys = [n3, n2, n1]
